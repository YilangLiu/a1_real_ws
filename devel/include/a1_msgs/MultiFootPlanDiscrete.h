// Generated by gencpp from file a1_msgs/MultiFootPlanDiscrete.msg
// DO NOT EDIT!


#ifndef A1_MSGS_MESSAGE_MULTIFOOTPLANDISCRETE_H
#define A1_MSGS_MESSAGE_MULTIFOOTPLANDISCRETE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <a1_msgs/FootPlanDiscrete.h>

namespace a1_msgs
{
template <class ContainerAllocator>
struct MultiFootPlanDiscrete_
{
  typedef MultiFootPlanDiscrete_<ContainerAllocator> Type;

  MultiFootPlanDiscrete_()
    : header()
    , feet()  {
    }
  MultiFootPlanDiscrete_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , feet(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::a1_msgs::FootPlanDiscrete_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::a1_msgs::FootPlanDiscrete_<ContainerAllocator> >> _feet_type;
  _feet_type feet;





  typedef boost::shared_ptr< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> const> ConstPtr;

}; // struct MultiFootPlanDiscrete_

typedef ::a1_msgs::MultiFootPlanDiscrete_<std::allocator<void> > MultiFootPlanDiscrete;

typedef boost::shared_ptr< ::a1_msgs::MultiFootPlanDiscrete > MultiFootPlanDiscretePtr;
typedef boost::shared_ptr< ::a1_msgs::MultiFootPlanDiscrete const> MultiFootPlanDiscreteConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator1> & lhs, const ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.feet == rhs.feet;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator1> & lhs, const ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace a1_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24cfed7044607c942541950144570913";
  }

  static const char* value(const ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24cfed7044607c94ULL;
  static const uint64_t static_value2 = 0x2541950144570913ULL;
};

template<class ContainerAllocator>
struct DataType< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1_msgs/MultiFootPlanDiscrete";
  }

  static const char* value(const ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is a message to hold a discrete foot plan for multiple robot feet\n"
"#\n"
"# The plans of each foot are stored in a vector of FootPlanDiscrete messages\n"
"# (0 = front left, 1 = back left, 2 = front right, 3 = back right).\n"
"# Accurate timing information to localize the plans is stored in the header\n"
"\n"
"Header header\n"
"a1_msgs/FootPlanDiscrete[] feet\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: a1_msgs/FootPlanDiscrete\n"
"# This is a message to hold the discrete foot plan for a single robot foot\n"
"#\n"
"# The plan is defined as a vector of FootState messages\n"
"# Accurate timing information is stored in the header\n"
"\n"
"Header header\n"
"a1_msgs/FootState[] footholds\n"
"\n"
"================================================================================\n"
"MSG: a1_msgs/FootState\n"
"# This is a message to hold the state of a single foot of a legged robot\n"
"#\n"
"# The states of each foot are stored in a vector of FootState messages\n"
"# Accurate timing information is stored in the header\n"
"\n"
"Header header\n"
"uint32 traj_index\n"
"geometry_msgs/Vector3 position\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 acceleration\n"
"bool contact\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.feet);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiFootPlanDiscrete_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::a1_msgs::MultiFootPlanDiscrete_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "feet[]" << std::endl;
    for (size_t i = 0; i < v.feet.size(); ++i)
    {
      s << indent << "  feet[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::a1_msgs::FootPlanDiscrete_<ContainerAllocator> >::stream(s, indent + "    ", v.feet[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // A1_MSGS_MESSAGE_MULTIFOOTPLANDISCRETE_H
