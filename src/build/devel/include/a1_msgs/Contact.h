// Generated by gencpp from file a1_msgs/Contact.msg
// DO NOT EDIT!


#ifndef A1_MSGS_MESSAGE_CONTACT_H
#define A1_MSGS_MESSAGE_CONTACT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace a1_msgs
{
template <class ContainerAllocator>
struct Contact_
{
  typedef Contact_<ContainerAllocator> Type;

  Contact_()
    : type(0)
    , contacts()  {
    }
  Contact_(const ContainerAllocator& _alloc)
    : type(0)
    , contacts(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _type_type;
  _type_type type;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _contacts_type;
  _contacts_type contacts;





  typedef boost::shared_ptr< ::a1_msgs::Contact_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::a1_msgs::Contact_<ContainerAllocator> const> ConstPtr;

}; // struct Contact_

typedef ::a1_msgs::Contact_<std::allocator<void> > Contact;

typedef boost::shared_ptr< ::a1_msgs::Contact > ContactPtr;
typedef boost::shared_ptr< ::a1_msgs::Contact const> ContactConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::a1_msgs::Contact_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::a1_msgs::Contact_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::a1_msgs::Contact_<ContainerAllocator1> & lhs, const ::a1_msgs::Contact_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.contacts == rhs.contacts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::a1_msgs::Contact_<ContainerAllocator1> & lhs, const ::a1_msgs::Contact_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace a1_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::a1_msgs::Contact_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a1_msgs::Contact_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a1_msgs::Contact_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a1_msgs::Contact_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a1_msgs::Contact_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a1_msgs::Contact_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::a1_msgs::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdf685a63f9cb6c50837ec4316d75b8d";
  }

  static const char* value(const ::a1_msgs::Contact_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdf685a63f9cb6c5ULL;
  static const uint64_t static_value2 = 0x0837ec4316d75b8dULL;
};

template<class ContainerAllocator>
struct DataType< ::a1_msgs::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1_msgs/Contact";
  }

  static const char* value(const ::a1_msgs::Contact_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::a1_msgs::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 0 is position control, 1 is velocity control\n"
"int8 type\n"
"float64[] contacts\n"
;
  }

  static const char* value(const ::a1_msgs::Contact_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::a1_msgs::Contact_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.contacts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Contact_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::a1_msgs::Contact_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::a1_msgs::Contact_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "contacts[]" << std::endl;
    for (size_t i = 0; i < v.contacts.size(); ++i)
    {
      s << indent << "  contacts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.contacts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // A1_MSGS_MESSAGE_CONTACT_H
